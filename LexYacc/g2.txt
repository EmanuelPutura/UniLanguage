N = 
	DIGIT
	NZDIGIT
	LETTER
	RELATION
	DIGITSEQ
	UINT
	INT
	CHARACTER
	CHAR
	STR
	STRING
	IDENTIFIER
	IDENTIFIERLIST
	TYPE1
	ARRAYDECL
	TYPE
	DECLARATION
	DECLLIST
	EXPRESSION
	TERM
	FACTOR
	IOSTMT
	CONDITION
	IFSTMT
	WHILESTMT
	STRUCTSTMT
	ASSIGNMENT
	SIMPLESTMT
	STMT
	PROGRAM
	RETURNSTMT

T = 
	a
	b
	c
	d
	e
	f
	g
	h
	i
	j
	k
	l
	m
	n
	o
	p
	q
	r
	s
	t
	u
	v
	w
	x
	y
	z
	0
	1
	2
	3
	4
	5
	6
	7
	8
	9
	"
	'
	[
	]
	{
	}
	(
	)
	:
	;
	,
	+ 
	- 
	* 
	/ 
	% 
	= 
	< 
	<= 
	== 
	> 
	>= 
	!= 
	!
	_
	let
	and
	or
	in
	if
	else
	switch
	do
	while
	for
	bool
	char
	int
	double
	uint
	string
	input
	output
	vec
	return
	id
	const

P = 
	DIGIT -> 0|1|2|3|4|5|6|7|8|9
	NZDIGIT -> 1|2|3|4|5|6|7|8|9
	LETTER -> a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z
	RELATION -> <|<=|==|!=|>=|>
	DIGITSEQ -> DIGIT|DIGIT$DIGITSEQ
	UINT -> 0|NZDIGIT|NZDIGIT$DIGITSEQ
	INT -> 0|NZDIGIT|NZDIGIT$DIGITSEQ|-$NZDIGIT$DIGITSEQ
	CHARACTER -> LETTER|DIGIT|_
	CHAR -> '$CHARACTER$'
	STR -> CHARACTER|CHARACTER$STRING
	STRING -> "$STR$"
	IDENTIFIER -> id|const
	IDENTIFIERLIST -> IDENTIFIER|IDENTIFIER$,$IDENTIFIERLIST
	TYPE1 -> bool|char|int|double|uint|string
	ARRAYDECL -> vec$($UINT$;$TYPE1$)$;
	TYPE -> TYPE1|ARRAYDECL
	DECLARATION -> let$IDENTIFIER$:$TYPE$;
	DECLLIST -> DECLARATION|DECLARATION$DECLLIST
	EXPRESSION -> TERM|TERM$+$EXPRESSION|TERM$-$EXPRESSION
	TERM -> FACTOR|FACTOR$*$TERM|FACTOR$/$TERM|FACTOR$%$TERM
	FACTOR -> IDENTIFIER|UINT|INT|CHAR|STRING|($EXPRESSION$)
	IOSTMT -> input$($IDENTIFIER$)$;|output$($IDENTIFIERLIST$)$;|output$($STRING$,$IDENTIFIERLIST$)$;
	CONDITION -> EXPRESSION$RELATION$EXPRESSION
	IFSTMT -> if$($CONDITION$)${$PROGRAM$}|if$($CONDITION$)${$PROGRAM$}$else${$PROGRAM$}
	WHILESTMT -> while$($CONDITION$)${$PROGRAM$}
	STRUCTSTMT -> IFSTMT|WHILESTMT
	ASSIGNMENT -> IDENTIFIER$=$EXPRESSION$;
	RETURNSTMT -> return$;
	SIMPLESTMT -> DECLLIST|ASSIGNMENT|IOSTMT|RETURNSTMT
	STMT -> SIMPLESTMT|STRUCTSTMT
	PROGRAM -> STMT|STMT$PROGRAM

s = PROGRAM